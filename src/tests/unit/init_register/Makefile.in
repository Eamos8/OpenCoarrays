# Makefile.in generated by automake 1.11.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
am__make_dryrun = \
  { \
    am__dry=no; \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
      *) \
        for am__flg in $$MAKEFLAGS; do \
          case $$am__flg in \
            *=*|--*) ;; \
            *n*) am__dry=yes; break;; \
          esac; \
        done;; \
    esac; \
    test $$am__dry = yes; \
  }
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
noinst_PROGRAMS = allocate_as_barrier$(EXEEXT) \
	register_alloc_comp_2$(EXEEXT) \
	allocate_as_barrier_proc$(EXEEXT) \
	register_alloc_comp_3$(EXEEXT) register_alloc_vector$(EXEEXT) \
	register$(EXEEXT) register_vector$(EXEEXT) \
	register_alloc_comp_1$(EXEEXT) $(am__EXEEXT_1)
subdir = src/tests/unit/init_register
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/libtool.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
@COND_OPT_TRUE@am__EXEEXT_1 = async_comp_alloc$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
dist_allocate_as_barrier_OBJECTS =  \
	allocate_as_barrier-allocate_as_barrier.$(OBJEXT)
allocate_as_barrier_OBJECTS = $(dist_allocate_as_barrier_OBJECTS)
allocate_as_barrier_DEPENDENCIES = $(top_builddir)/src/mpi_caf.o \
	$(top_builddir)/src/caf_auxiliary.o
allocate_as_barrier_LINK = $(FCLD) $(allocate_as_barrier_FCFLAGS) \
	$(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
dist_allocate_as_barrier_proc_OBJECTS =  \
	allocate_as_barrier_proc-allocate_as_barrier_proc.$(OBJEXT)
allocate_as_barrier_proc_OBJECTS =  \
	$(dist_allocate_as_barrier_proc_OBJECTS)
allocate_as_barrier_proc_DEPENDENCIES = $(top_builddir)/src/mpi_caf.o \
	$(top_builddir)/src/caf_auxiliary.o
allocate_as_barrier_proc_LINK = $(FCLD) \
	$(allocate_as_barrier_proc_FCFLAGS) $(FCFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
am__dist_async_comp_alloc_SOURCES_DIST = async_comp_alloc.f90
@COND_OPT_TRUE@dist_async_comp_alloc_OBJECTS =  \
@COND_OPT_TRUE@	async_comp_alloc-async_comp_alloc.$(OBJEXT)
async_comp_alloc_OBJECTS = $(dist_async_comp_alloc_OBJECTS)
@COND_OPT_TRUE@async_comp_alloc_DEPENDENCIES =  \
@COND_OPT_TRUE@	$(top_builddir)/src/mpi_caf.o \
@COND_OPT_TRUE@	$(top_builddir)/src/caf_auxiliary.o
async_comp_alloc_LINK = $(FCLD) $(async_comp_alloc_FCFLAGS) $(FCFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
dist_register_OBJECTS = register-register.$(OBJEXT)
register_OBJECTS = $(dist_register_OBJECTS)
register_DEPENDENCIES = $(top_builddir)/src/mpi_caf.o \
	$(top_builddir)/src/caf_auxiliary.o
register_LINK = $(FCLD) $(register_FCFLAGS) $(FCFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
dist_register_alloc_comp_1_OBJECTS =  \
	register_alloc_comp_1-register_alloc_comp_1.$(OBJEXT)
register_alloc_comp_1_OBJECTS = $(dist_register_alloc_comp_1_OBJECTS)
register_alloc_comp_1_DEPENDENCIES = $(top_builddir)/src/mpi_caf.o \
	$(top_builddir)/src/caf_auxiliary.o
register_alloc_comp_1_LINK = $(FCLD) $(register_alloc_comp_1_FCFLAGS) \
	$(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
dist_register_alloc_comp_2_OBJECTS =  \
	register_alloc_comp_2-register_alloc_comp_2.$(OBJEXT)
register_alloc_comp_2_OBJECTS = $(dist_register_alloc_comp_2_OBJECTS)
register_alloc_comp_2_DEPENDENCIES = $(top_builddir)/src/mpi_caf.o \
	$(top_builddir)/src/caf_auxiliary.o
register_alloc_comp_2_LINK = $(FCLD) $(register_alloc_comp_2_FCFLAGS) \
	$(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
dist_register_alloc_comp_3_OBJECTS =  \
	register_alloc_comp_3-register_alloc_comp_3.$(OBJEXT)
register_alloc_comp_3_OBJECTS = $(dist_register_alloc_comp_3_OBJECTS)
register_alloc_comp_3_DEPENDENCIES = $(top_builddir)/src/mpi_caf.o \
	$(top_builddir)/src/caf_auxiliary.o
register_alloc_comp_3_LINK = $(FCLD) $(register_alloc_comp_3_FCFLAGS) \
	$(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
dist_register_alloc_vector_OBJECTS =  \
	register_alloc_vector-register_alloc_vector.$(OBJEXT)
register_alloc_vector_OBJECTS = $(dist_register_alloc_vector_OBJECTS)
register_alloc_vector_DEPENDENCIES = $(top_builddir)/src/mpi_caf.o \
	$(top_builddir)/src/caf_auxiliary.o
register_alloc_vector_LINK = $(FCLD) $(register_alloc_vector_FCFLAGS) \
	$(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
dist_register_vector_OBJECTS =  \
	register_vector-register_vector.$(OBJEXT)
register_vector_OBJECTS = $(dist_register_vector_OBJECTS)
register_vector_DEPENDENCIES = $(top_builddir)/src/mpi_caf.o \
	$(top_builddir)/src/caf_auxiliary.o
register_vector_LINK = $(FCLD) $(register_vector_FCFLAGS) $(FCFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
FCCOMPILE = $(FC) $(AM_FCFLAGS) $(FCFLAGS)
FCLD = $(FC)
FCLINK = $(FCLD) $(AM_FCFLAGS) $(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \
	$@
SOURCES = $(dist_allocate_as_barrier_SOURCES) \
	$(dist_allocate_as_barrier_proc_SOURCES) \
	$(dist_async_comp_alloc_SOURCES) $(dist_register_SOURCES) \
	$(dist_register_alloc_comp_1_SOURCES) \
	$(dist_register_alloc_comp_2_SOURCES) \
	$(dist_register_alloc_comp_3_SOURCES) \
	$(dist_register_alloc_vector_SOURCES) \
	$(dist_register_vector_SOURCES)
DIST_SOURCES = $(dist_allocate_as_barrier_SOURCES) \
	$(dist_allocate_as_barrier_proc_SOURCES) \
	$(am__dist_async_comp_alloc_SOURCES_DIST) \
	$(dist_register_SOURCES) $(dist_register_alloc_comp_1_SOURCES) \
	$(dist_register_alloc_comp_2_SOURCES) \
	$(dist_register_alloc_comp_3_SOURCES) \
	$(dist_register_alloc_vector_SOURCES) \
	$(dist_register_vector_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CAF_LIBS = @CAF_LIBS@
CAF_MODDIR = @CAF_MODDIR@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FAILED_IMAGES = @FAILED_IMAGES@
FC = @FC@
FCFLAGS = @FCFLAGS@
Fortran_COMPILER = @Fortran_COMPILER@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL_DEPS = @LIBTOOL_DEPS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
MOD_DIR_FLAG = @MOD_DIR_FLAG@
MPI_EXEC = @MPI_EXEC@
MPI_Fortran_COMPILE_FLAGS = @MPI_Fortran_COMPILE_FLAGS@
MPI_Fortran_LINK_FLAGS = @MPI_Fortran_LINK_FLAGS@
MPI_INCLUDE = @MPI_INCLUDE@
MPI_LIBS = @MPI_LIBS@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PROJECT_VERSION = @PROJECT_VERSION@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
YACC = @YACC@
YFLAGS = @YFLAGS@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_FC = @ac_ct_FC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
opencoarrays_aware_compiler = @opencoarrays_aware_compiler@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
@COND_OPT_TRUE@MAYBE_PROG = async_comp_alloc
#initialize_mpi async_comp_alloc
dist_allocate_as_barrier_SOURCES = allocate_as_barrier.f90
allocate_as_barrier_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
allocate_as_barrier_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
dist_register_alloc_comp_1_SOURCES = register_alloc_comp_1.f90
register_alloc_comp_1_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
register_alloc_comp_1_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
dist_register_alloc_comp_2_SOURCES = register_alloc_comp_2.f90
register_alloc_comp_2_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
register_alloc_comp_2_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
dist_register_alloc_comp_3_SOURCES = register_alloc_comp_3.f90
register_alloc_comp_3_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
register_alloc_comp_3_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
dist_allocate_as_barrier_proc_SOURCES = allocate_as_barrier_proc.f90
allocate_as_barrier_proc_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
allocate_as_barrier_proc_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
@COND_OPT_TRUE@dist_async_comp_alloc_SOURCES = async_comp_alloc.f90
@COND_OPT_TRUE@async_comp_alloc_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
@COND_OPT_TRUE@async_comp_alloc_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
dist_register_SOURCES = register.f90
register_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
register_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
dist_register_vector_SOURCES = register_vector.f90
register_vector_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
register_vector_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
dist_register_alloc_vector_SOURCES = register_alloc_vector.f90
register_alloc_vector_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi
register_alloc_vector_LDADD = $(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o

#dist_initialize_mpi_SOURCES = initialize_mpi.F90
#initialize_mpi_FCFLAGS = -fcoarray=lib -L$(MPI_LIB) -lmpi -I
#initialize_mpi_LDADD=$(top_builddir)/src/mpi_caf.o $(top_builddir)/src/caf_auxiliary.o
CLEANFILES = allocate_as_barrier register_alloc_comp_2 allocate_as_barrier_proc register_alloc_comp_3 async_comp_alloc register_alloc_vector register initialize_mpi register_vector register_alloc_comp_1
all: all-am

.SUFFIXES:
.SUFFIXES: .f90 .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/tests/unit/init_register/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/tests/unit/init_register/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
allocate_as_barrier$(EXEEXT): $(allocate_as_barrier_OBJECTS) $(allocate_as_barrier_DEPENDENCIES) $(EXTRA_allocate_as_barrier_DEPENDENCIES) 
	@rm -f allocate_as_barrier$(EXEEXT)
	$(allocate_as_barrier_LINK) $(allocate_as_barrier_OBJECTS) $(allocate_as_barrier_LDADD) $(LIBS)
allocate_as_barrier_proc$(EXEEXT): $(allocate_as_barrier_proc_OBJECTS) $(allocate_as_barrier_proc_DEPENDENCIES) $(EXTRA_allocate_as_barrier_proc_DEPENDENCIES) 
	@rm -f allocate_as_barrier_proc$(EXEEXT)
	$(allocate_as_barrier_proc_LINK) $(allocate_as_barrier_proc_OBJECTS) $(allocate_as_barrier_proc_LDADD) $(LIBS)
async_comp_alloc$(EXEEXT): $(async_comp_alloc_OBJECTS) $(async_comp_alloc_DEPENDENCIES) $(EXTRA_async_comp_alloc_DEPENDENCIES) 
	@rm -f async_comp_alloc$(EXEEXT)
	$(async_comp_alloc_LINK) $(async_comp_alloc_OBJECTS) $(async_comp_alloc_LDADD) $(LIBS)
register$(EXEEXT): $(register_OBJECTS) $(register_DEPENDENCIES) $(EXTRA_register_DEPENDENCIES) 
	@rm -f register$(EXEEXT)
	$(register_LINK) $(register_OBJECTS) $(register_LDADD) $(LIBS)
register_alloc_comp_1$(EXEEXT): $(register_alloc_comp_1_OBJECTS) $(register_alloc_comp_1_DEPENDENCIES) $(EXTRA_register_alloc_comp_1_DEPENDENCIES) 
	@rm -f register_alloc_comp_1$(EXEEXT)
	$(register_alloc_comp_1_LINK) $(register_alloc_comp_1_OBJECTS) $(register_alloc_comp_1_LDADD) $(LIBS)
register_alloc_comp_2$(EXEEXT): $(register_alloc_comp_2_OBJECTS) $(register_alloc_comp_2_DEPENDENCIES) $(EXTRA_register_alloc_comp_2_DEPENDENCIES) 
	@rm -f register_alloc_comp_2$(EXEEXT)
	$(register_alloc_comp_2_LINK) $(register_alloc_comp_2_OBJECTS) $(register_alloc_comp_2_LDADD) $(LIBS)
register_alloc_comp_3$(EXEEXT): $(register_alloc_comp_3_OBJECTS) $(register_alloc_comp_3_DEPENDENCIES) $(EXTRA_register_alloc_comp_3_DEPENDENCIES) 
	@rm -f register_alloc_comp_3$(EXEEXT)
	$(register_alloc_comp_3_LINK) $(register_alloc_comp_3_OBJECTS) $(register_alloc_comp_3_LDADD) $(LIBS)
register_alloc_vector$(EXEEXT): $(register_alloc_vector_OBJECTS) $(register_alloc_vector_DEPENDENCIES) $(EXTRA_register_alloc_vector_DEPENDENCIES) 
	@rm -f register_alloc_vector$(EXEEXT)
	$(register_alloc_vector_LINK) $(register_alloc_vector_OBJECTS) $(register_alloc_vector_LDADD) $(LIBS)
register_vector$(EXEEXT): $(register_vector_OBJECTS) $(register_vector_DEPENDENCIES) $(EXTRA_register_vector_DEPENDENCIES) 
	@rm -f register_vector$(EXEEXT)
	$(register_vector_LINK) $(register_vector_OBJECTS) $(register_vector_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

.f90.o:
	$(FCCOMPILE) -c -o $@ $<

.f90.obj:
	$(FCCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

allocate_as_barrier-allocate_as_barrier.o: allocate_as_barrier.f90
	$(FC) $(allocate_as_barrier_FCFLAGS) $(FCFLAGS) -c -o allocate_as_barrier-allocate_as_barrier.o `test -f 'allocate_as_barrier.f90' || echo '$(srcdir)/'`allocate_as_barrier.f90

allocate_as_barrier-allocate_as_barrier.obj: allocate_as_barrier.f90
	$(FC) $(allocate_as_barrier_FCFLAGS) $(FCFLAGS) -c -o allocate_as_barrier-allocate_as_barrier.obj `if test -f 'allocate_as_barrier.f90'; then $(CYGPATH_W) 'allocate_as_barrier.f90'; else $(CYGPATH_W) '$(srcdir)/allocate_as_barrier.f90'; fi`

allocate_as_barrier_proc-allocate_as_barrier_proc.o: allocate_as_barrier_proc.f90
	$(FC) $(allocate_as_barrier_proc_FCFLAGS) $(FCFLAGS) -c -o allocate_as_barrier_proc-allocate_as_barrier_proc.o `test -f 'allocate_as_barrier_proc.f90' || echo '$(srcdir)/'`allocate_as_barrier_proc.f90

allocate_as_barrier_proc-allocate_as_barrier_proc.obj: allocate_as_barrier_proc.f90
	$(FC) $(allocate_as_barrier_proc_FCFLAGS) $(FCFLAGS) -c -o allocate_as_barrier_proc-allocate_as_barrier_proc.obj `if test -f 'allocate_as_barrier_proc.f90'; then $(CYGPATH_W) 'allocate_as_barrier_proc.f90'; else $(CYGPATH_W) '$(srcdir)/allocate_as_barrier_proc.f90'; fi`

async_comp_alloc-async_comp_alloc.o: async_comp_alloc.f90
	$(FC) $(async_comp_alloc_FCFLAGS) $(FCFLAGS) -c -o async_comp_alloc-async_comp_alloc.o `test -f 'async_comp_alloc.f90' || echo '$(srcdir)/'`async_comp_alloc.f90

async_comp_alloc-async_comp_alloc.obj: async_comp_alloc.f90
	$(FC) $(async_comp_alloc_FCFLAGS) $(FCFLAGS) -c -o async_comp_alloc-async_comp_alloc.obj `if test -f 'async_comp_alloc.f90'; then $(CYGPATH_W) 'async_comp_alloc.f90'; else $(CYGPATH_W) '$(srcdir)/async_comp_alloc.f90'; fi`

register-register.o: register.f90
	$(FC) $(register_FCFLAGS) $(FCFLAGS) -c -o register-register.o `test -f 'register.f90' || echo '$(srcdir)/'`register.f90

register-register.obj: register.f90
	$(FC) $(register_FCFLAGS) $(FCFLAGS) -c -o register-register.obj `if test -f 'register.f90'; then $(CYGPATH_W) 'register.f90'; else $(CYGPATH_W) '$(srcdir)/register.f90'; fi`

register_alloc_comp_1-register_alloc_comp_1.o: register_alloc_comp_1.f90
	$(FC) $(register_alloc_comp_1_FCFLAGS) $(FCFLAGS) -c -o register_alloc_comp_1-register_alloc_comp_1.o `test -f 'register_alloc_comp_1.f90' || echo '$(srcdir)/'`register_alloc_comp_1.f90

register_alloc_comp_1-register_alloc_comp_1.obj: register_alloc_comp_1.f90
	$(FC) $(register_alloc_comp_1_FCFLAGS) $(FCFLAGS) -c -o register_alloc_comp_1-register_alloc_comp_1.obj `if test -f 'register_alloc_comp_1.f90'; then $(CYGPATH_W) 'register_alloc_comp_1.f90'; else $(CYGPATH_W) '$(srcdir)/register_alloc_comp_1.f90'; fi`

register_alloc_comp_2-register_alloc_comp_2.o: register_alloc_comp_2.f90
	$(FC) $(register_alloc_comp_2_FCFLAGS) $(FCFLAGS) -c -o register_alloc_comp_2-register_alloc_comp_2.o `test -f 'register_alloc_comp_2.f90' || echo '$(srcdir)/'`register_alloc_comp_2.f90

register_alloc_comp_2-register_alloc_comp_2.obj: register_alloc_comp_2.f90
	$(FC) $(register_alloc_comp_2_FCFLAGS) $(FCFLAGS) -c -o register_alloc_comp_2-register_alloc_comp_2.obj `if test -f 'register_alloc_comp_2.f90'; then $(CYGPATH_W) 'register_alloc_comp_2.f90'; else $(CYGPATH_W) '$(srcdir)/register_alloc_comp_2.f90'; fi`

register_alloc_comp_3-register_alloc_comp_3.o: register_alloc_comp_3.f90
	$(FC) $(register_alloc_comp_3_FCFLAGS) $(FCFLAGS) -c -o register_alloc_comp_3-register_alloc_comp_3.o `test -f 'register_alloc_comp_3.f90' || echo '$(srcdir)/'`register_alloc_comp_3.f90

register_alloc_comp_3-register_alloc_comp_3.obj: register_alloc_comp_3.f90
	$(FC) $(register_alloc_comp_3_FCFLAGS) $(FCFLAGS) -c -o register_alloc_comp_3-register_alloc_comp_3.obj `if test -f 'register_alloc_comp_3.f90'; then $(CYGPATH_W) 'register_alloc_comp_3.f90'; else $(CYGPATH_W) '$(srcdir)/register_alloc_comp_3.f90'; fi`

register_alloc_vector-register_alloc_vector.o: register_alloc_vector.f90
	$(FC) $(register_alloc_vector_FCFLAGS) $(FCFLAGS) -c -o register_alloc_vector-register_alloc_vector.o `test -f 'register_alloc_vector.f90' || echo '$(srcdir)/'`register_alloc_vector.f90

register_alloc_vector-register_alloc_vector.obj: register_alloc_vector.f90
	$(FC) $(register_alloc_vector_FCFLAGS) $(FCFLAGS) -c -o register_alloc_vector-register_alloc_vector.obj `if test -f 'register_alloc_vector.f90'; then $(CYGPATH_W) 'register_alloc_vector.f90'; else $(CYGPATH_W) '$(srcdir)/register_alloc_vector.f90'; fi`

register_vector-register_vector.o: register_vector.f90
	$(FC) $(register_vector_FCFLAGS) $(FCFLAGS) -c -o register_vector-register_vector.o `test -f 'register_vector.f90' || echo '$(srcdir)/'`register_vector.f90

register_vector-register_vector.obj: register_vector.f90
	$(FC) $(register_vector_FCFLAGS) $(FCFLAGS) -c -o register_vector-register_vector.obj `if test -f 'register_vector.f90'; then $(CYGPATH_W) 'register_vector.f90'; else $(CYGPATH_W) '$(srcdir)/register_vector.f90'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstPROGRAMS ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
