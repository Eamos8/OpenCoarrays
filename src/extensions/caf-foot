# Default to "mpif90" Fortran compiler if environment variable FC has zero length:
if [ -z "$FC" ]; then
   FC=mpif90
fi

# FIXME
max_arguments=100
link_args="-fcoarray=lib -lcaf_mpi"

if [ "$caf_compiler" = "true" ]; then
  # Nothing to do other than pass execution permanently to the compiler with all command-line arguments:
  exec $FC "$@"
  # Past the point of no return: The above command launches the compiler without forking 
else
  # Verify that a file with the .f90, .F90, .f, or .F extension is the first argument:
  src_extension=`echo "$1" | cut -f2 -d'.'`
  if [[ $src_extension == 'f90' || $src_extension == 'F90' || $src_extension == 'f' || $src_extension == 'F' ]]; then
    # copy the source file into a new file for pre-processing (preprending "caf-" to the new file name):
    cp $1 caf-$1
    # Edit the copied source to replace CAF syntax with calls to public procedures in opencoarrays.f90
    sed -i '' 's/sync all/call sync_all/g' caf-$1
    sed -i '' 's/error stop/call error_stop/g' caf-$1
    sed -i '' 's/sync images/call sync_images/g' caf-$1
    # replace the file name in command-line argment 1 with the new name beofre passing execution to the compiler 
    set -- "caf-$1" "${@:2:max_arguments}"
    # Pass execution permanently to the compiler along with all command-line arguments:
    exec $FC "$@" -L $caf_lib_dir -I $caf_mod_dir $link_args
    # Past the point of no return: The above command launches the compiler without forking 
  else
    echo "CAF: The first argument must contain a .f90, .F90, .f, or .F file extension."
  fi
fi
# Report that reaching this line implies the script did not launch the compiler
echo "CAF could not compile the program."
