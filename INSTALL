INSTALLATION

See also the implementation status in the file STATUS

Introduction
------------

The following documentation provides instructions on how to set up the coarray
support on GNU Fortran, using the OpenCoarrays library, and how to compile and
run a simple coarray program.

GNU Fortran Configuration
-------------------------

The coarray support on GFortran is available since version GCC-5.0.
Currently, GCC-5.0 is downloadable from the trunk using SVN/GIT or 
from a snapshot; in both cases the user is supposed to compile GCC from source.
We provide quick instructions on how to build a minimal GCC version; the
official and complete instructions on how to build GCC from source are available
at: https://gcc.gnu.org/install/.

1) From the main directory create a build directory using:

   mkdir build

2) GCC requires various tools and packages like GMP, MPFR, MPC. These and others
   can be automatically downloaded typing the following command inside the main
   directory:

   ./contrib/download_prerequisites 

3) Inside the build directory type the following configure string customizing
   the installation path:

   ../configure --prefix=/your/path --enable-language=c,c++,fortran
   --disable-multilib

4) Type

   make -jN

   where N is the number of cores on your machine +1. (This may take a while).

5) Type:

   make install

OpenCoarrays Installation
-------------------------

OpenCoarrays contains four libraries:

* single
  Provides a stub library with a single image. To be used for testing or
  to turn a parallel program into a single-image program to avoid dependencies
  on other libraries.
  Requires only a C compiler.

* mpi - recommended version
  Communication library base on the Message Passing Interface (MPI); requires
  an MPI 3 implementation. (MPI 2 works with some restrictions.)
  MPICH, Open MPI, MVAPICH are common free implementations; vendor MPI
  implementations are typically based on either of them.  As MPI 3 is new and
  several MPI implementations have recently improved the one-sided
  communication (RMA, remote-memory access), consider using the newest release.
  We recommend to use MPICH or MVAPICH.

* gasnet
  Communication library based on GASNet (Global Address Space Network,
  http://gasnet.lbl.gov/). More difficult to setup and use but has typically a
  higher performance than MPI. Requires that the same compiler is used for both
  the compilation of GASNet itself and for the library.

* armci - unsupported/not working
  Communication library based on ARMCI (Aggregate Remote Memory Copy Interface,
  http://hpc.pnl.gov/armci/).  The libcaf_armci library is currently not
  supported in OpenCoarrays and uses an older ABI.
  Only included in OpenCoarrays to make it simpler for interested parties to
  implement a working libcaf_armci without starting from scratch.

Note:
* It is sufficient to compile only the library you are interested in.
* Any C compiler can be used, in particular older GCC or different compilers
  work as well.	 However, for MPI ABI compatibility, using a recent GCC for
  compilation is preferred


Prerequisites
-------------

- Single: (none except for a C compiler)
- MPI: Installed MPI implementation with the "mpicc" wrapper either in the
  path
- GASNet: Installed GASNet; same C compiler as used for compiling GASNet;
  knowledge where GASNet has been installed.


Building the libraries
----------------------

Run "make" followed by the library which should be build, e.g.
  make single mpi

You may need to edit the "make.inc" file for your system settings, e.g.
you may need to remove the "-Werror" option from the compile flags, set
a different compiler or similar.

For GASNet, you have to set GASNET_MAK to point to your GASNet installation
with the conduit which should be used.


Compiling on CRAY:

* Rename "make.inc.Cray-XE" to "make.inc"
* Run: module swap PrgEnv-cray PrgEnv-gnu
* You may need to update the GASNet path and the used compiler for GASNet
  or change other settings
* Run "make" with the library which should be created


Consider to install the just compiled libraries (single/libcaf_single.a,
mpi/libcaf_mpi.a etc.) into a library directory.

Consider to run the testsuite or examples (tests/) in the subdirectories.


How to compile and run a coarray program
----------------------------------------

We assume that the user has already installed GCC-5.0 and the latest version of
LIBCAF_MPI.

A hello_coarray.f90 program can compiled in a single step using the following
string:

mpifort -fcoarray=lib -L/path/to/opencoarrays/mpi hello_coarray.f90 -lcaf_mpi -o
hello

For running the program:

mpirun -np m ./hello

where m is the number of images you want to use.